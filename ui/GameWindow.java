/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Beans/Customizer.java to edit this template
 */
package lluviacomida.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.Timer;
import lluviacomida.models.Arma;
import lluviacomida.models.Cielo;

/**
 * representa el panel principal del juego.
 *
 * Este panel gestiona el ciclo de juego, la visualización gráfica y 
 * la interacción del usuario (clics del mouse).
 *
 * @author sofia bermudez
 * @since 19052025
 * @version 1.0.0
 */
public class GameWindow extends javax.swing.JPanel {
    
    //Objeto que gestiona la lógica del entorno del juego (comida, veneno, puntaje, etc.)
    private Cielo cielo;
    
    //Arma del jugador, usada para eliminar elementos con clics.
    private Arma arma;
    
    //Temporizador que controla el refresco del juego (cada 16 ms ≈ 60 FPS)
    private Timer gameTimer;
    
    //Bandera que indica si el juego sigue en ejecución
    private boolean gameRunning = true;

    /**
     * Constructor de la clase GameWindow. Inicializa los componentes
     * del panel y configura el entorno del juego.
     */
    
    public GameWindow() {
        initComponents();
        setupGame();
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        setLayout(new java.awt.BorderLayout());

    }//GEN-END:initComponents

    /**
     * Configura el entorno inicial del juego: dimensiones, fondo, listeners, lógica del juego y temporizador
     */
    
    private void setupGame(){
        setPreferredSize(new Dimension(800, 600));
        setBackground(Color.BLUE);
        
        cielo = new Cielo (0,0,600,800);
        arma = new Arma();
        
        setFocusable(true);
        
        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) { 
                    arma.usar(cielo, e.getX(), e.getY());
                    repaint();
                }
            }
        });
        
        gameTimer = new Timer(16, e -> {
            if (gameRunning) {
                cielo.refresh();
                repaint();
            }
        });
        gameTimer.start();  
    }
    
    /**
     * Método que detiene el juego: se detiene el temporizador y se marcan
     * las banderas correspondientes.
     */
    
    private void endGame() {
        gameRunning = false;
        cielo.detenerJuego();
        gameTimer.stop();
        System.out.println("Juego terminado por el usuario.");
    }
    
    /**
     * Método encargado de pintar todos los elementos del juego en pantalla.
     *
     * @param g objeto {@link Graphics} para pintar elementos gráficos
     */
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        cielo.paint(g);

        g.setColor(Color.BLACK);
        g.drawString("Comida: " + cielo.getComida().size(), 10, 20);
        g.drawString("Veneno: " + cielo.getVeneno().size(), 10, 40);
        g.drawString("Puntaje: " + cielo.getPuntaje(), 10, 60);
        g.drawString("Puntaje maximo: " + cielo.getPuntajeMaximo(), 10, 80);

        if (!gameRunning) {
            g.setColor(Color.BLACK);
            g.drawString("JUEGO TERMINADO", getWidth() / 2 - 60, getHeight() / 2);
        }
    }

}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
